
# Important enviornment variables to take note of:

# frontend vars:
#   STATIC_FRONTEND_PATH: this may or may not exist in the final built container. If it does, that means there is an availible 
#                         directory containing a compiled build for the frontend generated by npm run build, django will make a check
#                         and serve that app if it exists.
#   NODE_ENV: generated by node based off of (provided by node, you don't need to define this explicitly)
#   REACT_APP_BACKEND_ENDPOINT: defines where frontend requests should be sent

# backend vars:
#   SECRET_KEY:  the django secret key, this needs to be kept secret
#   DJANGO_ENV:  the current enviornment the app is in ("development"/"production")
#   DB_NAME:     the name of the database being connected to
#   DB_HOSTNAME: the name of the database host
#   DB_PORT:     which port the database will be running on (NOTE: standard to postgres is 5432)
#   DB_USERNAME: the database user
#   DB_PASSWORD: the database password

# example build/run of docker container to show how to work with env vars.

# https://blog.ploetzli.ch/2020/efficient-multi-stage-build-django-docker/
# https://lincolnloop.com/insights/using-setuppy-your-django-project/



# Dockerfile

# FROM python:3.9-slim-buster AS common-base
# ENV DJANGO_SETTINGS_FILE settings.ini
# # ARG BUILD_FRONTEND=false



# FROM common-base AS builder
# RUN pip install -U pip setuptools
# RUN mkdir -p /app
# WORKDIR /app
# COPY requirements.txt .

# COPY . /app/
# RUN pip install --no-warn-script-location --prefix=/install -r requirements.txt
# RUN cp -r /install/* /usr/local
# CMD ["python3", "manage.py", "collectstatic", "--no-input"]

# FROM common-base
# # COPY docker-entrypoint.sh /app
# COPY --from=builder /install /usr/local
# COPY --from=builder /app/static /app/static
# CMD ["python3", "manage.py", "runserver", "0.0.0.0:8000"]
# ENTRYPOINT ["/app/docker-entrypoint.sh"]


# FROM base-builder AS builder


# Only build frontend if specified in build arg
# RUN if [ "$BUILD_FRONTEND" = "true" ]; then \
#     # Build frontend here \
#     source ../buildfrontend.sh
# fi

#(5) Runtime stage
#   install the compiled static files into a fresh image

FROM python:3.9-slim-buster
# WORKDIR /app
# COPY . ./
# RUN pip install -r requirements.txt
# EXPOSE 8000

# CMD ["python3", "manage.py", "runserver", "0.0.0.0:8000"]

WORKDIR /app/api
COPY . ./
RUN pip install -r requirements.txt
RUN ["chmod", "+x", "/app/api/startup.sh"]
EXPOSE 8000
ENTRYPOINT ["/app/api/startup.sh"]